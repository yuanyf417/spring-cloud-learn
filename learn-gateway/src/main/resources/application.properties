# spring cloud route config
#spring.cloud.gateway.routes[0].id=nacos-route
#spring.cloud.gateway.routes[0].uri=lb://learn-gateway-provider
#spring.cloud.gateway.routes[0].predicates[0].name=Path
## /api/**  provider1 = 注册到应用名称: 示例 learn-gateway-provider 定义为 provider1
#spring.cloud.gateway.routes[0].predicates[0].args[pattern]=/provider1/**
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

## gateway 匹配场景
## Path 根据请求的路径进行匹配
#spring.cloud.gateway.routes[0].id=path-route
#spring.cloud.gateway.routes[0].uri=lb://service-provider
#spring.cloud.gateway.routes[0].predicates[0].name=Path
#spring.cloud.gateway.routes[0].predicates[0].args[pattern]=/api/**

## Method 根据 HTTP 方法（如 GET、POST、PUT 等）进行匹配
#spring.cloud.gateway.routes[1].id=method-route
#spring.cloud.gateway.routes[1].uri=lb://service-provider
#spring.cloud.gateway.routes[1].predicates[0].name=Method
#spring.cloud.gateway.routes[1].predicates[0].args[methods]=GET

## Header 根据请求头的值进行匹配
#spring.cloud.gateway.routes[2].id=header-route
#spring.cloud.gateway.routes[2].uri=lb://service-provider
#spring.cloud.gateway.routes[2].predicates[0].name=Header
#spring.cloud.gateway.routes[2].predicates[0].args[name]=X-Request-Id
#spring.cloud.gateway.routes[2].predicates[0].args[value]=12345

## Query 根据请求的查询参数进行匹配
#spring.cloud.gateway.routes[3].id=query-route
#spring.cloud.gateway.routes[3].uri=lb://service-provider
#spring.cloud.gateway.routes[3].predicates[0].name=Query
#spring.cloud.gateway.routes[3].predicates[0].args[name]=userId
#spring.cloud.gateway.routes[3].predicates[0].args[value]=1

## RemoteAddr 根据请求的远程地址进行匹配
#spring.cloud.gateway.routes[4].id=remote-addr-route
#spring.cloud.gateway.routes[4].uri=lb://service-provider
#spring.cloud.gateway.routes[4].predicates[0].name=RemoteAddr
#spring.cloud.gateway.routes[4].predicates[0].args[pattern]=192.168.1.0/24

## Cookie 根据请求的 Cookie 值进行匹配
#spring.cloud.gateway.routes[5].id=cookie-route
#spring.cloud.gateway.routes[5].uri=lb://service-provider
#spring.cloud.gateway.routes[5].predicates[0].name=Cookie
#spring.cloud.gateway.routes[5].predicates[0].args[name]=sessionId
#spring.cloud.gateway.routes[5].predicates[0].args[value]=abc123

## Accept 根据请求的 Accept 头进行匹配
#spring.cloud.gateway.routes[6].id=accept-route
#spring.cloud.gateway.routes[6].uri=lb://service-provider
#spring.cloud.gateway.routes[6].predicates[0].name=Accept
#spring.cloud.gateway.routes[6].predicates[0].args[value]=application/json

## Method Or Header 根据 HTTP 方法或请求头进行匹配
#spring.cloud.gateway.routes[8].id=method-or-header-route
#spring.cloud.gateway.routes[8].uri=lb://service-provider
#spring.cloud.gateway.routes[8].predicates[0].name=MethodOrHeader
#spring.cloud.gateway.routes[8].predicates[0].args[methods]=POST
#spring.cloud.gateway.routes[8].predicates[0].args[name]=X-Request-Id


## filters 对经过网关的请求和响应进行处理(可以修改请求和响应的属性、添加或删除请求头、修改请求路径等)
## StripPrefix 去掉请求路径中的前缀部分
## 使用场景：当路由的 URI 需要去掉某个前缀时，例如，当请求路径为 /api/users，而实际服务处理的是 /users
#spring.cloud.gateway.routes[0].id=strip-prefix-route
#spring.cloud.gateway.routes[0].uri=lb://user-service
#spring.cloud.gateway.routes[0].predicates[0].name=Path
#spring.cloud.gateway.routes[0].predicates[0].args[pattern]=/api/users/**
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

## AddRequestHeader 向请求添加请求头
#spring.cloud.gateway.routes[1].id=add-header-route
#spring.cloud.gateway.routes[1].uri=lb://user-service
#spring.cloud.gateway.routes[1].filters[0]=AddRequestHeader=X-Auth-Token, your-token-value

## RemoveRequestHeader 从请求中移除指定的请求头
#spring.cloud.gateway.routes[2].id=remove-header-route
#spring.cloud.gateway.routes[2].uri=lb://user-service
#spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Authorization


## RewritePath 重写请求路径
## 使用场景：当需要将请求路径修改为另一个格式时。例如，将 /api/users/{id} 重写为 /users/{id}
#spring.cloud.gateway.routes[3].id=rewrite-path-route
#spring.cloud.gateway.routes[3].uri=lb://user-service
#spring.cloud.gateway.routes[3].predicates[0].name=Path
#spring.cloud.gateway.routes[3].predicates[0].args[pattern]=/api/users/*
#spring.cloud.gateway.routes[3].filters[0]=RewritePath=/api/users/(?<segment>.*), /users/${segment}

## SetRequestHeader 设置请求头的值
#spring.cloud.gateway.routes[4].id=set-header-route
#spring.cloud.gateway.routes[4].uri=lb://user-service
#spring.cloud.gateway.routes[4].filters[0]=SetRequestHeader=Custom-Header, custom-value

## AddResponseHeader 向响应添加响应头
## 使用场景：当需要在响应中添加特定的元信息时，例如 CORS 相关的头
#spring.cloud.gateway.routes[5].id=add-response-header-route
#spring.cloud.gateway.routes[5].uri=lb://user-service
#spring.cloud.gateway.routes[5].filters[0]=AddResponseHeader=Access-Control-Allow-Origin, *

## RedirectTo 将请求重定向到指定的 URL
#spring.cloud.gateway.routes[6].id=redirect-route
#spring.cloud.gateway.routes[6].uri=lb://user-service
#spring.cloud.gateway.routes[6].predicates[0].name=Path
#spring.cloud.gateway.routes[6].predicates[0].args[pattern]=/old-path
#spring.cloud.gateway.routes[6].filters[0]=RedirectTo=302, /new-path

## CircuitBreaker 实现熔断器功能，防止请求发送到故障的服务
## 使用场景：当某个后端服务不可用时，使用熔断器可以快速返回错误响应，避免进一步的请求
#spring.cloud.gateway.routes[7].id=circuit-breaker-route
#spring.cloud.gateway.routes[7].uri=lb://user-service
#spring.cloud.gateway.routes[7].filters[0]=CircuitBreaker=serviceId=service-provider, fallbackUri=forward:/fallback







